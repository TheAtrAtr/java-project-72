import org.gradle.api.tasks.compile.JavaCompile

plugins {
    id 'checkstyle'
    id 'java'
    id 'application'
    id 'io.ebean' version '13.6.5'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group 'hexlet.code'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.javalin:javalin:5.5.0'
    implementation 'io.javalin:javalin-rendering:5.5.0'
    implementation 'org.slf4j:slf4j-simple:2.0.5'

    implementation 'org.thymeleaf:thymeleaf:3.1.1.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    implementation 'org.webjars:bootstrap:5.2.3'

    implementation 'com.h2database:h2:2.1.214'
    implementation 'org.postgresql:postgresql:42.6.0'

    implementation 'io.ebean:ebean:12.12.1'
    implementation 'io.ebean:ebean-ddl-generator:12.12.1'
    implementation 'io.ebean:ebean-querybean:12.12.1'
    implementation 'io.ebean:ebean-migration:12.12.1'
    implementation 'io.ebean:ebean-annotation:7.3'
    annotationProcessor 'io.ebean:querybean-generator:12.12.1'

    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.5'
    implementation 'javax.activation:activation:1.1.1'

    implementation 'org.jsoup:jsoup:1.15.4'

    implementation 'com.konghq:unirest-java:3.14.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'io.ebean:ebean-test:13.15.0'
    testImplementation 'com.konghq:unirest-java:3.14.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
}

test {
    useJUnitPlatform()
}
checkstyle {
    toolVersion '10.0'
}

testlogger {
    showStandardStreams true
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

compileJava {
    options.release = 17
    options.encoding('UTF-8')
}
application {
    // Define the main class for the application.
    mainClassName = 'hexlet.code.App'
}

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean

task generateMigrations(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'hexlet.code.MigrationGenerator'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

